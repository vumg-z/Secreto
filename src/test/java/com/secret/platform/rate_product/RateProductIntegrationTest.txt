package com.secret.platform.rate_product;


import com.fasterxml.jackson.databind.ObjectMapper;

import com.secret.platform.Application;
import com.secret.platform.option_set.OptionSet;
import com.secret.platform.option_set.OptionSetRepository;
import com.secret.platform.options.Options;
import com.secret.platform.options.OptionsRepository;
import com.secret.platform.rate_set.RateSetRepository;
import com.secret.platform.type_code.ValidTypeCode;
import com.secret.platform.type_code.ValidTypeCodeRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import java.util.Arrays;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest(classes = Application.class)
@ActiveProfiles("test")
@AutoConfigureMockMvc
public class RateProductIntegrationTest {

    @Autowired
    private WebApplicationContext webApplicationContext;

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private OptionsRepository optionsRepository;

    @Autowired
    private OptionSetRepository optionSetRepository;

    @Autowired
    private RateSetRepository rateSetRepository;

    @Autowired
    private ValidTypeCodeRepository validTypeCodeRepository;

    private ObjectMapper objectMapper;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        objectMapper = new ObjectMapper();
        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();
    }

    @Test
    public void testFullWorkflow() throws Exception {
        // Step 1: Create Options with optSetCode: 1
        Options option1 = Options.builder()
                .optionCode("LOCN")
                .optSetCode("1")
                .build();

        Options option2 = Options.builder()
                .optionCode("TAX")
                .optSetCode("1")
                .build();

        Options option3 = Options.builder()
                .optionCode("LRF")
                .optSetCode("1")
                .build();

        List<Options> optionsList = Arrays.asList(option1, option2, option3);

        // Actual saving options
        for (Options option : optionsList) {
            mockMvc.perform(post("/api/options")
                            .contentType(MediaType.APPLICATION_JSON)
                            .content(objectMapper.writeValueAsString(option)))
                    .andExpect(status().isOk());
        }

        // Step 2: Create RateType with typeCode: FC
        ValidTypeCode validTypeCode = new ValidTypeCode();
        validTypeCode.setTypeCode("FC");

        mockMvc.perform(post("/api/valid-type-codes")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(validTypeCode)))
                .andExpect(status().isOk());

        // Step 3: Create RateProduct
        String rateProductJson = "{\n" +
                "  \"rateSet\": {\n" +
                "    \"rateSetCode\": \"BJXA01/*\"\n" +
                "  },\n" +
                "  \"product\": \"MI2\",\n" +
                "  \"effPkupDate\": \"2024-07-24\",\n" +
                "  \"effPkupTime\": \"12:00\",\n" +
                "  \"mustPkupBefore\": \"18:00\",\n" +
                "  \"comment\": \"Walkup L1\",\n" +
                "  \"rateType\": \"\",\n" +
                "  \"inclCvg1\": false,\n" +
                "  \"inclCvg2\": false,\n" +
                "  \"inclCvg3\": false,\n" +
                "  \"inclCvg4\": false,\n" +
                "  \"milesMeth\": null,\n" +
                "  \"week\": null,\n" +
                "  \"extraWeek\": null,\n" +
                "  \"freeMilesHour\": null,\n" +
                "  \"graceMinutes\": 59,\n" +
                "  \"chargeForGrace\": true,\n" +
                "  \"discountable\": true,\n" +
                "  \"editable\": true,\n" +
                "  \"minDaysForWeek\": null,\n" +
                "  \"periodMaxDays\": null,\n" +
                "  \"defltRaType\": {\n" +
                "    \"typeCode\": \"FC\"\n" +
                "  },\n" +
                "  \"daysPerMonth\": 30,\n" +
                "  \"commYn\": null,\n" +
                "  \"commCat\": \"A\",\n" +
                "  \"inclOptSet\": {\n" +
                "    \"code\": \"1\"\n" +
                "  },\n" +
                "  \"currency\": \"MXN\",\n" +
                "  \"paidFreeDay\": \"*/*\",\n" +
                "  \"modDate\": \"2024-07-24T10:00:00.000+00:00\",\n" +
                "  \"modTime\": 12.0,\n" +
                "  \"modEmpl\": \"EMP123\",\n" +
                "  \"empl\": \"EMP456\"\n" +
                "}";

        MvcResult result = mockMvc.perform(post("/api/rate-products")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(rateProductJson))
                .andExpect(status().isOk())
                .andReturn();

        // Step 4: Verify the created RateProduct
        String responseString = result.getResponse().getContentAsString();
        RateProduct createdRateProduct = objectMapper.readValue(responseString, RateProduct.class);

        assertThat(createdRateProduct.getInclOptSet().getCode()).isEqualTo("1");
        assertThat(createdRateProduct.getInclOptSet().getOptions()).hasSize(3);

        List<String> optionCodes = Arrays.asList("LOCN", "TAX", "LRF");
        for (Options option : createdRateProduct.getInclOptSet().getOptions()) {
            assertThat(optionCodes).contains(option.getOptionCode());
        }
    }
}
